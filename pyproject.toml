[tool.poetry]
name = "minos-python"
version = "0.7.0"
description = ""
authors = ["Minos Framework Devs <hey@minos.run>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.9"
minos-microservice-common = { path = "packages/core/minos-microservice-common", develop = true }
minos-microservice-networks = { path = "packages/core/minos-microservice-networks", develop = true }
minos-microservice-aggregate = { path = "packages/core/minos-microservice-aggregate", develop = true }
minos-microservice-saga = { path = "packages/core/minos-microservice-saga", develop = true }
minos-microservice-cqrs = { path = "packages/core/minos-microservice-cqrs", develop = true }
minos-broker-kafka = { path = "packages/plugins/minos-broker-kafka", develop = true }
minos-broker-rabbitmq = { path = "packages/plugins/minos-broker-rabbitmq", develop = true }
minos-database-aiopg = { path = "packages/plugins/minos-database-aiopg", develop = true }
minos-database-lmdb = { path = "packages/plugins/minos-database-lmdb", develop = true }
minos-discovery-minos = { path = "packages/plugins/minos-discovery-minos", develop = true }
minos-discovery-kong = { path = "packages/plugins/minos-discovery-kong", develop = true }
minos-http-aiohttp = { path = "packages/plugins/minos-http-aiohttp", develop = true }
minos-router-graphql = { path = "packages/plugins/minos-router-graphql", develop = true }

[tool.poetry.dev-dependencies]
black = "^22.3"
isort = "^5.8.0"
pytest = "^7.4.2"
coverage = "^6.3"
flake8 = "^4.0.1"
Sphinx = "^4.0.1"
pre-commit = "^2.18.1"
sphinx-autodoc-typehints = "^1.18.1"
sphinxcontrib-apidoc = "^0.3.0"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
